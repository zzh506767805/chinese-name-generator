---
description: 
globs: 
alwaysApply: false
---
# 用户偏好与设计规范

## 项目角色定位

### 开发者身份
- **经验丰富的全栈开发与架构师**
- 精通互联网项目从前期规划到落地的全流程管理
- 擅长现代化技术栈和最佳实践

### 协作对象
- **非技术背景的产品经理**
- 需要使用通俗易懂的语言沟通
- 避免过多技术术语，注重业务价值解释

## 核心设计原则

### 1. 简洁优先
- 使用最简单、最通用的解决方案
- 避免过度设计和不必要的复杂性
- 优先选择成熟稳定的技术方案

### 2. 用户体验至上
- 界面设计现代化、直观易用
- 响应式设计，完美适配移动端
- 加载速度快，交互流畅

### 3. 国际化友好
- 支持多语言切换（中文/英文）
- 文化敏感的设计考虑
- SEO 优化的多语言路由

## 技术选型偏好

### 前端技术栈
```
Next.js 14 (App Router) - 现代化全栈框架
├── TypeScript - 类型安全
├── Tailwind CSS - 原子化CSS
├── React 19 - 用户界面库
└── next-intl - 国际化支持
```

### 后端服务
```
Next.js API Routes - 统一技术栈
├── OpenAI API - AI 服务集成
├── Stripe API - 支付服务
├── PostgreSQL - 数据库（预留）
└── Vercel - 部署平台
```

### 开发工具
- **包管理**: npm
- **代码风格**: Prettier + ESLint
- **版本控制**: Git
- **IDE**: VS Code / Cursor

## UI/UX 设计规范

### 颜色体系
```css
/* 主色调 - 现代蓝色系 */
primary: {
  50: '#eff6ff',
  500: '#3b82f6',
  600: '#2563eb',
  700: '#1d4ed8',
}

/* 辅助色 - 灰色系 */
gray: {
  50: '#f9fafb',
  100: '#f3f4f6',
  600: '#4b5563',
  800: '#1f2937',
}

/* 功能色 */
success: '#10b981',
warning: '#f59e0b',
error: '#ef4444',
```

### 字体规范
```css
/* 标题字体 */
font-heading: 'Inter', system-ui, sans-serif;

/* 正文字体 */
font-body: 'Inter', system-ui, sans-serif;

/* 中文字体优化 */
font-chinese: 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif;
```

### 间距系统
```css
/* Tailwind 标准间距 */
spacing: {
  xs: '0.5rem',   /* 8px */
  sm: '0.75rem',  /* 12px */
  md: '1rem',     /* 16px */
  lg: '1.5rem',   /* 24px */
  xl: '2rem',     /* 32px */
  '2xl': '3rem',  /* 48px */
}
```

### 组件设计原则
1. **卡片布局**: 使用阴影和圆角营造层次感
2. **按钮设计**: 明确的视觉层级和状态反馈
3. **表单设计**: 清晰的标签和友好的错误提示
4. **加载状态**: 流畅的骨架屏和加载动画

## 用户行为习惯

### 目标用户群体
- **主要用户**: 寻求中文名字的外国人
- **次要用户**: 对中文文化感兴趣的用户
- **使用场景**: 
  - 给新生儿起中文名
  - 学习中文时选择中文名
  - 文化交流和个人兴趣

### 用户期望
1. **简单易用**: 不需要复杂的操作步骤
2. **文化准确**: 名字要有真正的文化内涵
3. **个性化**: 能够根据用户偏好定制
4. **专业性**: 提供名字的详细解释

### 交互模式
```
用户访问 → 填写基本信息 → 选择偏好 → 生成名字 → 查看解释 → 可选支付
```

## 内容策略

### 文案风格
- **友好亲切**: 使用温暖、欢迎的语调
- **专业权威**: 体现中文文化的深度和专业性
- **国际化**: 考虑不同文化背景用户的理解能力

### 多语言内容
```
中文内容：
- 突出文化底蕴和传统价值
- 使用优雅的中文表达

英文内容：
- 简洁明了，易于理解
- 突出服务的独特价值
```

## 性能要求

### 页面加载
- **首屏渲染**: < 2秒
- **完全加载**: < 3秒
- **Core Web Vitals**: 达到良好标准

### 移动端优化
- **响应式设计**: 完美适配所有设备
- **触摸友好**: 适当的按钮尺寸和间距
- **网络优化**: 考虑弱网环境

## 安全与隐私

### 数据保护
```
用户数据处理原则：
├── 最小化收集 - 只收集必要信息
├── 透明处理 - 明确告知数据用途
├── 安全存储 - 加密存储敏感信息
└── 用户控制 - 提供数据删除选项
```

### 支付安全
- 使用 Stripe 处理支付，不存储支付信息
- HTTPS 全站加密
- 定期安全审计

## 部署与维护

### 部署策略
```
开发环境：
├── 本地开发: npm run dev
├── 预览部署: Vercel Preview
└── 生产部署: Vercel Production

环境变量管理：
├── 开发环境: .env.local
├── 预览环境: Vercel 环境变量
└── 生产环境: Vercel 环境变量
```

### 监控与分析
- **错误监控**: 集成错误追踪服务
- **性能监控**: Core Web Vitals 监控
- **用户分析**: 基础的使用统计（隐私友好）

## 代码质量标准

### 代码审查检查点
1. **功能完整性**: 是否满足业务需求
2. **代码可读性**: 是否清晰易懂
3. **性能影响**: 是否有性能问题
4. **安全考虑**: 是否存在安全隐患
5. **国际化支持**: 是否支持多语言

### 文档要求
- **README.md**: 项目概述、安装、使用说明
- **API 文档**: 详细的接口说明
- **组件文档**: 组件使用说明和示例
- **部署文档**: 部署步骤和环境配置

## 协作流程

### 需求沟通
1. **产品需求**: 使用简单语言描述业务价值
2. **技术方案**: 解释技术选择的原因和影响
3. **时间评估**: 提供现实的开发时间预估
4. **风险提醒**: 提前告知可能的技术风险

### 进度汇报
- **日常进度**: 简要说明当前开发状态
- **问题反馈**: 及时沟通遇到的技术问题
- **解决方案**: 提供问题的解决建议

## 持续改进

### 用户反馈收集
```
反馈渠道：
├── 用户访谈 - 深度了解用户需求
├── 使用数据 - 分析用户行为模式
├── 错误日志 - 发现和修复问题
└── 性能数据 - 优化用户体验
```

### 迭代优化
- **功能优化**: 基于用户反馈改进功能
- **性能优化**: 持续优化加载速度和交互体验
- **内容优化**: 完善翻译和文案质量
- **设计优化**: 提升界面美观度和易用性
